import React from 'react';
import CanvasJSReact from '../lib/canvasjs.react';
import Select from 'react-select';
import {DateType, StockType} from '../common/Enums';
import Popup from 'react-popup';
import './BasicStockCharts.css';
// import 'bootstrap/dist/css/bootstrap.min.css'
import {Button, DropdownButton, Dropdown} from 'react-bootstrap'


var CanvasJS = CanvasJSReact.CanvasJS;
var CanvasJSChart = CanvasJSReact.CanvasJSChart;

class TDXTestStockCharts extends React.Component {
    constructor(props) {
        super(props);
        
        this.state = {
            options: {}
        };

        this.options = {
            zoomEnabled: true,
            animationEnabled: true,
            title: {
                text: "Try Zooming - Panning"
            },
            axisY: {
                includeZero: false
            },
            // data: data  // random data
        };
    }

    componentDidMount() {
        this.getStock();
    }

    getStock = () => {
        let options2  = {
			theme: "light1", // "light1", "light2", "dark1", "dark2"
			animationEnabled: true,
            exportEnabled: true,
            zoomEnabled: true,
			title:{
				text: `test test test`
			},
			// axisX: {
            //     interval: intervalConfig[this.state.dateType],
			// },
			axisY: {
				includeZero:false,
				prefix: "ï¿¥",
				title: "Price (in RMB)"
			}
        }
        var dataSeries = { 
            type: "candlestick",
            showInLegend: true,
            name: `test tes111`,
            yValueFormatString: "$###0.00",
            // xValueFormatString: "MMM-D YYYY HH:mm",
         };
        let dataPoints = [];
        dataSeries.dataPoints = dataPoints;
        
        var stockData = [];
        let stockDataPoints = [];
        // let date = res["date"];
        let high = [3938.09, 3938.7, 3935.53, 3936.11, 3941.57, 3944.74, 3949.76, 3952.56, 3950.58, 3949.29, 3954.67, 3956.78, 3960.46, 3960.85, 3960.91, 3958.04, 3960.69, 3966.32, 3968.36, 3966, 3965.25, 3966.55, 3963.35, 3965.21, 3966.56, 3959.64, 3948.96, 3945.81, 3942.26, 3932.49, 3933.63, 3930.57, 3930.12, 3928.32, 3928.46, 3932.18, 3936.43, 3934.1, 3931.96, 3930.6, 3928.92, 3928.01, 3930.37, 3936.31, 3937.55, 3932.61, 3929.4, 3929.5, 3932.09, 3938.64, 3941.52, 3940.43, 3970.25, 3976.03, 3978.05, 3975.98, 3972.94, 3966.92, 3965.73, 3966.69, 3966.41, 3952.42, 3947.86, 3947.38, 3945.56, 3945.04, 3944.29, 3944.39, 3953.86, 3953.47, 3949.07, 3949.25, 3945.24, 3941.09, 3942.46, 3943.58, 3944.74, 3944.21, 3933.7, 3930.45, 3926.65, 3921.55, 3919.38, 3917.02, 3916.42, 3916.33, 3916.43, 3907.4, 3897.17, 3891.98, 3880.43, 3876.19, 3877.65, 3867.51, 3870.26, 3867.49, 3869.03, 3864.25, 3863.31, 3867.83, 3881.1, 3881.96, 3879.01, 3875.19, 3872.77, 3872.53, 3874.7, 3888.4, 3891.16, 3881.58, 3879.52, 3877.51, 3873.96, 3872.12, 3870.62, 3867.15, 3868.16, 3869.45, 3869.56, 3863.16, 3861.15, 3859.3, 3864.41, 3866.03, 3868.09, 3848.89, 3844.66, 3852.14, 3850.09, 3847.75, 3852, 3856.42, 3875.43, 3875.1, 3878.14, 3882.89, 3884.76, 3885.25, 3882.44, 3890.3, 3889.79, 3876.61, 3872.12, 3870.16, 3866.71, 3864.42, 3860.89, 3859.43, 3860.63, 3844.94, 3847.94, 3848.15, 3842.68, 3840.71, 3839.5, 3835.87, 3842.44, 3841.59, 3833.17, 3830.84, 3826.14, 3824.21, 3817.76, 3815.09, 3811.9, 3818.76, 3820.29, 3826.8, 3829.72, 3832.32, 3831.69, 3834.61, 3849.12, 3854.05, 3856.51, 3857.92, 3856.16, 3851.42, 3849.91, 3852.03, 3855.24, 3852.06, 3852.84, 3855.5, 3861.91, 3862.2, 3859.16, 3861.33, 3862.78, 3860.21, 3859.05, 3854.81, 3852.24, 3848.63, 3847.89, 3843.26, 3849.19, 3853.88, 3856.5, 3854.74, 3853.12, 3855.99, 3859.79, 3864.95, 3877.45, 3876.19, 3877.14, 3877.97, 3879.82, 3874.27, 3870.4, 3867.6, 3864.24, 3836.54, 3826.07, 3821.67, 3816.9, 3817.08, 3818.74, 3817.22, 3819.85, 3805.97, 3800.48, 3796.05, 3800, 3808.69, 3807.99, 3811.65, 3809.7, 3800.21, 3796.77, 3799.94, 3799.81, 3795.83, 3790.86, 3797.72, 3799.97, 3798.3, 3792, 3794.21, 3793.22, 3797.12, 3795.89, 3794.97, 3796.02, 3779.94, 3776.74, 3780.99, 3777.65, 3773.24, 3769.64, 3767.15, 3768.91, 3768.92, 3763.2, 3760.54, 3763.71, 3764.94, 3765.37, 3763.37, 3763.38, 3763.67, 3777.09, 3780.05, 3782.21, 3783.91, 3783.89, 3789.91, 3790.54, 3788.17, 3786.81, 3786.98, 3783.28, 3783.15, 3785.05, 3781.67, 3778.18, 3768.9, 3773.44, 3771.25, 3768.4, 3768.5, 3765.86, 3767.17, 3779.58, 3781.6, 3778.19, 3774.39, 3757.65, 3749.64, 3741.67, 3740.03, 3745.55, 3747.34, 3752.58, 3744.72, 3739.68, 3738.68, 3738.24, 3739.95, 3754.22, 3752.03, 3748.88, 3749.26, 3750.16, 3749.22, 3735.48, 3724.78, 3678.49, 3681.9, 3685.55, 3688.54, 3688.57, 3684.75, 3678.3, 3680.37, 3682.29, 3681.96, 3674.95, 3670.18, 3667.9, 3660.1, 3655.82, 3649.14, 3651.22, 3627.71, 3618.34, 3599.99, 3578.74, 3557.97, 3556.98, 3564.03, 3578.6, 3578.71, 3578.13, 3574.35, 3570.3, 3568.09, 3561.31, 3556.51, 3558.2, 3553.59, 3554.19, 3549.89, 3557.28, 3559.23, 3565.79, 3575.57, 3577.23, 3575.87, 3578.93, 3570.91, 3565.03, 3565.8, 3565.31, 3572.61, 3593.03, 3601.57, 3601.87, 3596.8, 3595.03, 3601.1, 3608, 3614.78, 3623.4, 3631.47, 3627.84, 3623.45, 3625.09, 3629.14, 3632.15, 3639.84, 3651.85, 3653, 3656.85, 3654.69, 3655.95, 3655.13, 3653.36, 3654.53, 3655.9, 3649.72, 3648.53, 3645.67, 3647.65, 3647.6, 3649.91, 3651.84, 3656.6, 3649.53, 3649.33, 3642.71, 3645.07, 3644.88, 3644.68, 3643.21, 3640.54, 3630.5, 3626.73, 3629.07, 3628.11, 3626.25, 3621.33, 3625.3, 3646.93, 3651.23, 3651, 3642.76, 3646.73, 3650.66, 3654.97, 3666.36, 3673.45, 3675.88, 3672.55, 3679.89, 3683.63, 3688.41, 3682.93, 3683.82];
        let low = [3932.27, 3933.65, 3928.59, 3930.79, 3933.77, 3937.88, 3941.5, 3948.86, 3947.74, 3944.5, 3947.31, 3952.62, 3954.42, 3954.29, 3957.81, 3955.46, 3954.96, 3959.06, 3964.73, 3957.22, 3959.07, 3960.07, 3958.73, 3959.87, 3958.94, 3947.87, 3942.55, 3938.59, 3922.92, 3926.3, 3929.5, 3927.07, 3927.63, 3922.98, 3923.6, 3925.1, 3926.51, 3928.41, 3928.33, 3926.75, 3925.76, 3924.07, 3926.47, 3926, 3929.72, 3927.6, 3922.31, 3921.75, 3927.99, 3928.97, 3935.88, 3937, 3947.45, 3969.29, 3973.6, 3969.9, 3966.38, 3964.03, 3962.18, 3962.27, 3948.81, 3941.68, 3944.83, 3941.12, 3940.45, 3939.99, 3939.97, 3939.9, 3943.32, 3943.7, 3944.65, 3943.76, 3938.74, 3937.87, 3938.11, 3936.98, 3937.61, 3931.69, 3928.62, 3925.15, 3920.16, 3916.47, 3910.63, 3907.36, 3912.13, 3911.1, 3905.93, 3898.48, 3891.9, 3877.65, 3870.65, 3873.21, 3859.4, 3857.82, 3864.84, 3863.37, 3863.06, 3862.27, 3855.63, 3855.84, 3865.64, 3876.76, 3873.14, 3869.34, 3868.94, 3868.51, 3866.1, 3874.1, 3880.36, 3874.78, 3874.51, 3872.19, 3870.95, 3865.11, 3862.52, 3859.54, 3856.42, 3856.26, 3861.77, 3859.14, 3854.99, 3855.19, 3856.4, 3861.46, 3848.08, 3837.61, 3837.14, 3844.54, 3846.33, 3846.16, 3846.37, 3851.24, 3861.68, 3870.8, 3871.77, 3876.13, 3879.31, 3880.11, 3879.94, 3879.74, 3874.57, 3869.6, 3866.32, 3862.4, 3862.26, 3859.95, 3855.17, 3851.64, 3841.24, 3840.13, 3842.96, 3841.07, 3839.13, 3834.34, 3832.33, 3829.69, 3828.36, 3831.8, 3825.1, 3824.13, 3823.07, 3817.67, 3813.85, 3810.04, 3803.81, 3811.19, 3811.67, 3813.94, 3826.13, 3825.65, 3827.53, 3826.57, 3831.24, 3847.9, 3846.66, 3853.27, 3849.67, 3846.66, 3845.51, 3845.66, 3847.21, 3843.09, 3843.6, 3849.46, 3854.55, 3855.27, 3854.07, 3852.26, 3853.51, 3856.03, 3854, 3851.08, 3845.1, 3843.91, 3841.11, 3835.76, 3843.15, 3843.4, 3851.06, 3851.37, 3849.41, 3851.9, 3853.93, 3857.11, 3867.63, 3871.6, 3871.96, 3872.53, 3874.04, 3869.67, 3863.33, 3861.73, 3834.31, 3824.62, 3818.63, 3814.95, 3810.5, 3812.56, 3811.53, 3797.38, 3805.75, 3793.13, 3795.06, 3791.77, 3791.1, 3799.46, 3804.29, 3803.78, 3795.28, 3794.54, 3792.62, 3792.63, 3793.82, 3789.7, 3784.66, 3781.65, 3792.65, 3789.87, 3786.03, 3784.5, 3789.18, 3791, 3792.89, 3789.46, 3779.66, 3774.87, 3768.74, 3776.21, 3772.22, 3768.49, 3764.02, 3758.23, 3755.15, 3761.79, 3759.36, 3755.54, 3760.11, 3760.16, 3760.89, 3754.95, 3757.69, 3757.08, 3763.03, 3775.26, 3779.53, 3780.78, 3780, 3780.05, 3781.03, 3785.21, 3783.65, 3781.46, 3781.1, 3781.72, 3780.2, 3776.44, 3761.67, 3764.02, 3767.25, 3767.32, 3766.8, 3765.09, 3762.23, 3761.51, 3765.06, 3777.64, 3772.9, 3757.2, 3740.69, 3741.38, 3732.28, 3734.18, 3731.7, 3735.81, 3743.68, 3738.48, 3734.21, 3733.57, 3734.56, 3734.29, 3742.86, 3744.97, 3744.19, 3744.47, 3742.07, 3733.63, 3720.29, 3656.16, 3665.96, 3670.58, 3680.11, 3680.97, 3682.34, 3676.54, 3671.41, 3668.54, 3671.95, 3672.62, 3667.35, 3665.81, 3658.87, 3654.39, 3642.29, 3640.58, 3614.17, 3614.42, 3597.85, 3578.38, 3553.48, 3550.36, 3539.32, 3545.76, 3562.6, 3570.07, 3572.56, 3566.16, 3566.29, 3558.31, 3552.94, 3549.76, 3545.48, 3546.53, 3548.61, 3543.24, 3549.45, 3553.66, 3555.71, 3564.12, 3566.89, 3565.87, 3570.01, 3561.3, 3559.4, 3556.17, 3558.55, 3562.33, 3568.23, 3593.13, 3592.79, 3591.35, 3590.53, 3591.06, 3597.82, 3606.06, 3613.41, 3623.03, 3622.31, 3619.7, 3621.47, 3622.38, 3625.86, 3629.56, 3641.29, 3647.21, 3651.62, 3650.12, 3650.76, 3650.91, 3648.91, 3650.05, 3641.32, 3645.53, 3642.53, 3642.53, 3643.61, 3642.42, 3645.42, 3647.44, 3646.56, 3643.24, 3641.79, 3637.7, 3639.93, 3640.65, 3640.74, 3636.24, 3624.96, 3620.32, 3621.99, 3624.78, 3624.15, 3619.46, 3616.7, 3617.05, 3628.55, 3639.23, 3640.73, 3638.85, 3642.51, 3643.35, 3646.16, 3652.14, 3666.13, 3668.04, 3666.8, 3670.23, 3676.01, 3678.49, 3676.03, 3674.15];
        let open = high;
        let close = low;

        for (let i = 0; i < high.length; ++i) {
            stockDataPoints.push({
                // label: new Date(date[i]),
                x: i,
                y: [open[i], high[i], low[i], close[i]]
            });
        }
        dataSeries.dataPoints = stockDataPoints;

        let chanLunPoints = [];
        let chanLunDataSeries = { 
            type: "line",
            showInLegend: true,
            name: `chan lun`,
            yValueFormatString: "$###0.00"
        };
        let chanLunIndex = [10, 20,30,50,70,80,120,150,170,340,390];
        for (let i = 0; i < chanLunIndex.length; ++i) {
            
            chanLunPoints.push({
                x: chanLunIndex[i],
                y: high[chanLunIndex[i]]
            });
        }
        chanLunDataSeries.dataPoints = chanLunPoints;

        stockData.push(dataSeries);
        stockData.push(chanLunDataSeries);
        options2.data = stockData;

        this.setState({
            options: options2
        });
        console.log("here it is")
        console.log(this.state);
    }

    render() {
        return (
              <div>
                    {this.state.options != undefined &&
                    <CanvasJSChart options = {this.state.options}/>}
                    <div style={{display: 'inline-block'}}>
                        <Button
                            variant="success"
                            onClick={this.getStock}>
                                Get Stock
                        </Button>
                    </div>
                    <Popup 
                        className="mm-popup"
                        btnClass="mm-popup__btn"
                        closeBtn={true}
                        defaultOk="Ok" />
              </div>
          );
    }
}

export default TDXTestStockCharts