import React from 'react';
import CanvasJSReact from '../lib/canvasjs.react';
import Select from 'react-select';
import {DateType, StockType} from '../common/Enums';
import Popup from 'react-popup';
import './BasicStockCharts.css';
// import 'bootstrap/dist/css/bootstrap.min.css'
import {Button, DropdownButton, Dropdown} from 'react-bootstrap'


var CanvasJS = CanvasJSReact.CanvasJS;
var CanvasJSChart = CanvasJSReact.CanvasJSChart;

class TDXTestStockCharts extends React.Component {
    constructor(props) {
        super(props);
        
        this.state = {
            options: {}
        };

        this.options = {
            zoomEnabled: true,
            animationEnabled: true,
            title: {
                text: "Try Zooming - Panning"
            },
            axisY: {
                includeZero: false
            },
            // data: data  // random data
        };
    }

    componentDidMount() {
        this.getStock();
    }

    getStock = () => {
        let options2  = {
			theme: "light1", // "light1", "light2", "dark1", "dark2"
			animationEnabled: true,
            exportEnabled: true,
            zoomEnabled: true,
			title:{
				text: `test test test`
			},
			// axisX: {
            //     interval: intervalConfig[this.state.dateType],
			// },
			axisY: {
				includeZero:false,
				prefix: "ï¿¥",
				title: "Price (in RMB)"
			}
        }
        var dataSeries = { 
            type: "candlestick",
            showInLegend: true,
            name: `Real stock price`,
            yValueFormatString: "$###0.00",
            // xValueFormatString: "MMM-D YYYY HH:mm",
         };
        dataSeries.dataPoints = [];
        
        let stockData = [];
        let stockDataPoints = [];
        // let date = res["date"];
        let high = [695.3, 696.13, 696.04, 699.06, 699.37, 699.33, 698.66, 697.76, 697.81, 698.34, 698.45, 698.52, 699.77, 699.97, 700.3, 700.25, 702.26, 701.89, 700.71, 700.33, 700.34, 699.04, 698.11, 698.47, 698.46, 698.05, 697.48, 696.41, 696.5, 696.45, 696.08, 696.51, 696.56, 696.97, 697.52, 697.35, 697.48, 697.36, 697.59, 697.88, 698.02, 697.52, 698.03, 698.12, 697.85, 697.23, 697.31, 697.09, 698.12, 698.03, 698.02, 698.28, 697.88, 698.66, 698.71, 699.18, 699.44, 699.71, 700.78, 701.25, 704.68, 702.27, 700.03, 700.36, 700.25, 699.87, 701.15, 700.88, 700.02, 700.37, 701.97, 702.32, 703.42, 703.78, 703.09, 702.67, 702.88, 702.27, 702.06, 701.95, 701.2, 700.77, 700.89, 700.54, 700.37, 700.23, 700.22, 700.31, 700.2, 700.55, 701.14, 701.31, 700.98, 701.41, 700.97, 700.51, 700.17, 699.46, 699.69, 700.21, 700.31, 700.38, 701.56, 701.61, 700.93, 700.9, 700.61, 700.4, 699.03, 698.37, 698.16, 697.74, 697.58, 696.47, 696.3, 696.79, 697.38, 697.06, 696.96, 696.84, 697.37, 697.35, 696.57, 696.07, 696.15, 695.79, 695.33, 694.72, 695.16, 695.35, 695.29, 695.84, 696.03, 695.87, 696.3, 697.05, 697.11, 697.06, 697.11, 696.75, 696.83, 698.66, 698.66, 698.26, 698.37, 698.49, 700.01, 700.08, 699.42, 698.8, 699.41, 699.51, 699.22, 699.33, 699.31, 698.81, 700.71, 700.04, 700.03, 699.26, 698.31, 697.48, 697.84, 697.88, 697.29, 697.39, 697.4, 698.8, 703.26, 706.79, 704.45, 703.18, 703.13, 702.26, 701.62, 700.95, 701.42, 701.58, 701.77, 702.08, 702.05, 701.75, 701.38, 701.4, 701.24, 700.56, 700.47, 700.29, 701.15, 701.25, 701.08, 701.25, 702.07, 701.78, 701.16, 700.53, 700.31, 700.44, 700.08, 699.82, 699.63, 699.71, 699.75, 699.71, 699.45, 698.19, 697.69, 696.99, 697.32, 697.74, 698.28, 697.94, 697.82, 697.31, 696.93, 697.63, 698.67, 698.87, 699.68, 699.32, 698.92, 698.55, 699.34, 699.31, 698.69, 698.52, 698.01, 697.83, 697.98, 698.07, 698.17, 698.28, 697.9, 697.7, 697.32, 697.01, 697.04, 696.5, 695.89, 696.22, 696.14, 696.43, 696.27, 696.58, 696.56, 698.35, 698.57, 696.88, 696.2, 695.66, 695.85, 696.02, 707.97, 707.62, 708.87, 713.41, 713.97, 710.94, 711.43, 710.71, 709.72, 710.24, 711.4, 712.03, 710.17, 710.19, 708.78, 708.22, 708, 706.57, 706.92, 707.38, 707.65, 709.3, 712.76, 711.38, 712.82, 713.01, 714.68, 716.06, 714.61, 717.1, 720.92, 720.78, 725.05, 727.75, 725.36, 725.01, 721.41, 721.71, 722.78, 722.34, 722.83, 723.11, 723.13, 722.04, 723.04, 723.07, 723.47, 722.54, 723.24, 719.69, 722.45, 725.29, 726.59, 723.34, 725.94, 725.5, 724.52, 723.73, 722.09, 722.11, 722, 721.56, 720.26, 720.33, 721.67, 722.71, 723.22, 723.53, 723.33, 722.95, 725.29, 725.52, 725.73, 725.74, 729.41, 732.55, 733.12, 731.15, 735.16, 736.08, 738.23, 737.39, 735.61, 735.6, 736.62, 736.95, 736.85, 734.73, 732.77, 733.05, 733.06, 733.75, 733.91, 735.11, 735.15, 734.08, 735.96, 736.78, 735.03, 733.12, 731.84, 733.04, 736.68, 737.29, 735.93, 737.41, 734.43, 734.44, 735.04, 735.3, 736.12, 738.3, 740.75, 741.21, 740.45, 747.97, 752.97, 754.19, 757.1, 765.71, 775.52, 776.32, 775.46, 772.64, 771.96, 772.3, 773.37, 773.59, 770.31, 766.09, 763.43, 763, 762.91, 762.26, 759.55, 759.39, 760.99, 761.49, 760.57, 759.69, 757.9, 756.7, 755.3, 754.23, 760.26, 763.87, 757.33, 757.04, 761.36, 763.91, 762.53, 766.14, 767.64, 765.08, 763.14, 761.66, 759.11, 758.99, 764.46, 766.45, 765.18, 763.25, 761.42, 760.42, 759.6, 759.36, 759.12, 759.17,];
        let low = [694.75, 695.02, 695.56, 695.74, 698.41, 698.39, 697.4, 697.26, 697.25, 697.32, 698.12, 698.17, 697.77, 698.17, 699.6, 699.05, 700.09, 700.36, 700.09, 699.58, 698.98, 697.68, 697.57, 697.97, 697.63, 697.07, 696.21, 695.96, 696.04, 695.49, 695.32, 696.05, 696.1, 696.11, 696.93, 696.84, 697.05, 696.95, 696.95, 697.5, 697.37, 697.12, 697.32, 697.65, 696.8, 696.74, 696.88, 696.36, 696.68, 697.53, 697.54, 697.63, 697.31, 697.34, 698.18, 698.33, 698.62, 699.12, 699.4, 700.52, 702.16, 699.6, 698.35, 699.8, 699.56, 699.28, 699.66, 700.07, 699.27, 699.71, 700.2, 701.86, 702.02, 702.88, 702.15, 702.06, 702.01, 701.66, 701.53, 701.14, 700.29, 700.39, 700.18, 700.09, 699.87, 699.82, 699.75, 699.84, 699.62, 699.72, 700.29, 700.85, 700.53, 700.74, 700.25, 699.79, 699.01, 698.95, 699.2, 699.36, 699.81, 699.97, 700.07, 700.35, 700.15, 700.22, 699.91, 700.01, 697.43, 697.52, 697.25, 697.04, 696.12, 695.65, 695.53, 695.87, 696.31, 696.51, 696.18, 696.41, 696.5, 696.17, 695.66, 695.45, 695.48, 695.07, 694.2, 694.11, 694.26, 694.68, 694.87, 694.8, 695.1, 695.18, 695.41, 696.26, 696.53, 696.43, 696.42, 696.01, 696.4, 696.43, 698.22, 697.43, 697.48, 698.05, 698.37, 699.19, 698.67, 698.37, 698.46, 698.96, 698.51, 698.55, 698.51, 698.46, 699.19, 699.34, 698.72, 698.12, 697.09, 696.57, 696.58, 696.93, 696.67, 696.66, 696.86, 697.31, 698.88, 702.81, 702.55, 702.57, 701.81, 701.42, 700.37, 700.41, 700.43, 701.19, 701.3, 701.44, 701.32, 701.21, 700.72, 700.76, 700.24, 699.84, 699.78, 699.92, 699.85, 700.59, 700.61, 700.79, 701.04, 700.96, 700.5, 699.86, 699.84, 699.83, 699.28, 699.38, 699.15, 699.3, 699.13, 699.18, 697.53, 697.22, 696.51, 696.2, 696.47, 696.3, 697.58, 697.51, 697.03, 696.01, 696.16, 696.36, 696.89, 698.04, 698.63, 698.68, 698.21, 697.99, 698.3, 698.41, 698.11, 697.72, 697.36, 697.19, 697.09, 697.09, 697.42, 697.56, 697.36, 696.8, 696.71, 696.27, 696.28, 695.66, 695.41, 695.45, 695.37, 695.72, 695.6, 695.81, 696.13, 696.06, 696.89, 695.97, 695.37, 695.03, 695.17, 695.48, 705.82, 705.26, 705.94, 708.79, 710.89, 709.16, 709.66, 709.6, 707.89, 707.99, 709.29, 709.57, 709.42, 708.49, 707.57, 707.68, 705.96, 705.54, 706.22, 706.39, 706.47, 707.21, 709.11, 710.63, 711, 711, 710.97, 713.61, 713.91, 714.2, 717.1, 719.19, 720.81, 724.55, 723.59, 721.27, 720.73, 720.9, 721.47, 721.63, 721.65, 722.17, 721.49, 721.37, 721.85, 722.44, 722.43, 721.59, 717.98, 717.42, 719.77, 721.61, 723.06, 722.06, 722.19, 724.36, 723.61, 721.78, 720.9, 721.18, 720.83, 719.67, 719.63, 719.31, 720.19, 721.11, 722.57, 722.7, 722.48, 722.37, 722.89, 724.57, 724.99, 724.29, 724.45, 729.04, 730.53, 730.23, 730.77, 734.79, 736.04, 734.34, 734.62, 734.47, 734.77, 736.4, 734.38, 732.59, 731.71, 732.63, 732.55, 732.55, 733.15, 733.4, 733.94, 733.7, 731.82, 734.14, 732.75, 730.78, 730.83, 731.18, 732.87, 735.44, 734.42, 734.36, 733.5, 733.59, 734, 734.47, 734.82, 736, 738.12, 740.43, 738.31, 739.77, 747.29, 750.68, 750.85, 757.18, 765.76, 771.34, 771.4, 769.94, 770.22, 770.27, 771.12, 770.33, 765.13, 763.68, 760.73, 762.28, 761.97, 759.65, 756.94, 758.6, 758.37, 760.29, 759.41, 757.85, 756.36, 755.26, 753.92, 753.68, 751.57, 757.21, 753.46, 752.76, 757.02, 761.28, 759.89, 761.6, 764.81, 762.08, 761.52, 759.23, 756.21, 756.37, 758.98, 762.65, 762.94, 760.09, 759, 758.95, 758.98, 758.2, 758.32, 758.52,];
        let open = high;
        let close = low;

        for (let i = 0; i < high.length; ++i) {
            stockDataPoints.push({
                // label: new Date(date[i]),
                x: i,
                y: [open[i], high[i], low[i], close[i]]
            });
        }
        dataSeries.dataPoints = stockDataPoints;


        var mlDataSeries = { 
            type: "candlestick",
            showInLegend: true,
            name: `Merged Line`,
            yValueFormatString: "$###0.00",
            // xValueFormatString: "MMM-D YYYY HH:mm",
         };
        let yOffset = 25;
        let mlStockDataPoints = [];
        let mlHigh = [695.3, 696.13, 699.06, 699.37, 699.33, 698.66, 697.76, 698.34, 698.45, 699.97, 700.3, 700.25, 702.26, 700.71, 700.33, 699.04, 698.11, 698.47, 698.46, 698.05, 697.48, 696.41, 696.5, 696.45, 696.08, 696.51, 696.56, 696.97, 697.52, 697.35, 697.48, 697.36, 698.02, 697.52, 698.03, 698.12, 697.85, 697.23, 697.31, 697.09, 698.12, 698.28, 697.88, 698.66, 698.71, 699.18, 699.44, 699.71, 700.78, 701.25, 704.68, 702.27, 700.03, 700.36, 700.25, 699.87, 701.15, 700.02, 700.37, 701.97, 702.32, 703.42, 703.78, 703.09, 702.67, 702.27, 702.06, 701.95, 700.77, 700.54, 700.37, 700.23, 
            700.22, 700.31, 700.2, 700.55, 701.14, 701.31, 700.98, 701.41, 700.97, 700.51, 700.17, 699.46, 699.69, 700.21, 700.31, 700.38, 701.56, 701.61, 700.9, 700.4, 698.37, 698.16, 697.74, 697.58, 696.47, 696.3, 696.79, 697.38,
            696.84, 697.37, 697.35, 696.57, 696.07, 696.15, 695.79, 695.33, 694.72, 695.16, 695.84, 696.03, 696.3, 697.05, 697.11, 697.06, 696.75, 696.83, 698.66, 698.26, 698.37, 698.49, 700.01, 700.08, 
            699.42, 698.8, 699.41, 699.51, 699.22, 699.33, 699.31, 698.81, 700.71, 700.03, 699.26, 698.31, 697.48, 697.84, 697.88, 697.29, 697.4, 698.8, 703.26, 706.79, 703.18, 703.13, 702.26, 700.95, 701.42, 701.58, 701.77, 702.08, 702.05, 701.75, 701.38, 701.4, 701.24, 700.56, 700.29, 701.15, 701.25, 702.07, 701.78, 701.16, 700.53, 700.31, 699.82, 699.63, 699.75, 699.71, 699.45, 698.19, 697.69, 696.99, 697.74, 698.28, 697.94, 697.82, 696.93, 697.63, 698.67, 698.87, 699.68, 698.92, 698.55, 699.34, 698.69, 698.52, 698.01, 697.83, 698.17, 698.28, 697.9, 697.7, 697.32, 697.01, 697.04, 696.5, 695.89, 696.22, 
            696.14, 696.43, 696.27, 698.35, 698.57, 696.88, 696.2, 695.66, 695.85, 696.02, 707.97, 707.62, 708.87, 713.41, 713.97, 710.94, 711.43, 710.71, 709.72, 710.24, 711.4, 712.03, 710.17, 708.22, 708, 706.57, 706.92, 707.38, 707.65, 709.3, 712.76, 714.68, 716.06, 717.1, 720.92, 725.05, 727.75, 725.36, 725.01, 721.41, 721.71, 722.78, 722.83, 723.13, 722.04, 723.04, 723.47, 722.54, 719.69, 722.45, 725.29, 726.59, 723.34, 725.94, 724.52, 723.73, 722.09, 722.11, 722, 721.56, 720.26, 721.67, 722.71, 723.22, 723.53, 723.33, 722.95, 725.29, 725.52, 729.41, 732.55, 733.12, 731.15, 735.16, 736.08, 738.23, 735.6, 736.62, 736.95, 736.85, 734.73, 732.77, 733.75, 733.91, 735.11, 735.15, 734.08, 736.78, 735.03, 731.84, 733.04, 736.68, 737.29, 735.93, 734.43, 734.44, 735.04, 735.3, 736.12, 738.3,
            740.75, 741.21, 740.45, 747.97, 752.97, 754.19, 757.1, 765.71, 775.52, 776.32, 771.96, 772.3, 773.59, 770.31, 766.09, 762.91, 762.26, 759.39, 760.99, 761.49, 760.57, 759.69, 757.9, 756.7, 755.3, 754.23, 763.87, 757.33, 757.04, 761.36, 763.91, 762.53, 766.14, 767.64, 765.08, 763.14, 761.66, 758.99, 764.46, 766.45, 763.25, 761.42, 759.6, 759.12, 759.17,];
        let mlLow = [694.75, 695.56, 695.74, 698.41, 698.39, 697.4, 697.25, 697.32, 698.12, 698.17, 699.6, 699.05, 700.36, 700.09, 698.98, 697.68, 697.57, 697.97, 697.63, 697.07, 696.21, 695.96, 696.04, 695.49, 695.32, 696.05, 696.1, 696.11, 696.93, 696.84, 697.05, 696.95, 697.5, 697.12, 697.32, 697.65, 696.8, 696.74, 696.88, 696.36, 697.54, 697.63, 697.31, 697.34, 698.18, 698.33, 698.62, 699.12, 699.4, 700.52, 702.16, 699.6, 698.35, 699.8, 699.56, 699.28, 700.07, 699.27, 699.71, 700.2, 701.86, 702.02, 702.88, 702.15, 702.01, 701.66, 701.53, 701.14, 700.18, 700.09, 699.87, 699.82, 699.75, 699.84, 699.62, 699.72, 700.29, 700.85, 700.53, 700.74, 700.25, 699.79, 699.01, 698.95, 699.2, 699.36, 699.81, 699.97, 700.07, 700.35, 700.15, 699.91, 697.43, 697.25, 697.04, 696.12, 695.65, 695.53, 695.87, 696.51,
            696.18, 696.5, 696.17, 695.66, 695.45, 695.48, 695.07, 694.2, 694.11, 694.26, 694.87, 695.18, 695.41, 696.26, 696.53, 696.42, 696.01, 696.4, 698.22, 697.43, 697.48, 698.05, 698.37, 699.19, 698.67, 698.37, 698.46, 698.96, 698.51, 698.55, 698.51, 698.46, 699.34, 698.72, 698.12, 697.09, 696.57, 696.58, 696.93, 696.66, 696.86, 697.31, 698.88, 702.81, 702.55, 701.81, 701.42, 700.37, 700.43, 701.19, 701.3, 701.44, 701.32, 701.21, 700.72, 700.76, 700.24, 699.84, 699.78, 699.85, 700.79, 701.04, 700.96, 700.5, 699.86, 699.83, 699.28, 699.15, 699.3, 699.18, 697.53, 697.22, 696.51, 696.2, 696.47, 697.58, 697.51, 697.03, 696.01, 696.36, 696.89, 698.04, 698.68, 698.21, 697.99, 698.41, 698.11, 697.72, 697.36, 697.09, 697.42, 697.56, 697.36, 696.8, 696.71, 696.27, 696.28, 695.66, 695.41, 695.45,
            695.37, 695.72, 695.6, 696.13, 696.89, 695.97, 695.37, 695.03, 695.17, 695.48, 705.82, 705.26, 705.94, 708.79, 710.89, 709.16, 709.66, 709.6, 707.89, 707.99, 709.29, 709.57, 708.49, 707.57, 705.96, 705.54, 706.22, 706.39, 706.47, 707.21, 710.63, 711, 713.91, 714.2, 719.19, 720.81, 724.55, 723.59, 721.27, 720.73, 720.9, 721.63, 721.65, 722.17, 721.37, 721.85, 722.44, 717.98, 717.42, 719.77, 721.61, 723.06, 722.06, 724.36, 723.61, 721.78, 720.9, 721.18, 720.83, 719.67, 719.31, 720.19, 721.11, 722.57, 722.7, 722.48, 722.37, 722.89, 724.57, 724.99, 729.04, 730.53, 730.23, 730.77, 734.79, 736.04, 734.34, 734.77, 736.4, 734.38, 732.59, 731.71, 732.63, 733.15, 733.4, 733.94, 731.82, 734.14, 732.75, 730.78, 731.18, 732.87, 735.44, 734.36, 733.5, 733.59, 734, 734.47, 734.82, 736,
            738.12, 740.43, 738.31, 739.77, 747.29, 750.68, 750.85, 757.18, 765.76, 771.4, 769.94, 770.27, 771.12, 765.13, 763.68, 760.73, 759.65, 756.94, 758.37, 760.29, 759.41, 757.85, 756.36, 755.26, 
            753.92, 751.57, 757.21, 753.46, 752.76, 757.02, 761.28, 759.89, 761.6, 764.81, 762.08, 761.52, 759.23, 756.21, 758.98, 762.94, 760.09, 759, 758.95, 758.2, 758.52,];
        let mlOpen = mlHigh;
        let mlClose = mlLow;
        for (let i = 0; i < mlHigh.length; ++i) {
            mlStockDataPoints.push({
                x: i,
                y: [mlOpen[i] - yOffset, mlHigh[i] - yOffset, mlLow[i] - yOffset, mlClose[i] - yOffset]
            });
        }
        mlDataSeries.dataPoints = mlStockDataPoints;

        let chanLunPoints = [];
        let chanLunDataSeries = { 
            type: "line",
            showInLegend: true,
            name: `chan lun`,
            yValueFormatString: "$###0.00"
        };
        let chanLunIndex = [6, 12, 24, 35, 39, 50, 108, 132, 136, 143, 178, 182, 207, 214, 225, 236, 248, 275, 289, 309, 325, 333, 337];
        for (let i = 0; i < chanLunIndex.length; ++i) {
            
            chanLunPoints.push({
                x: chanLunIndex[i],
                y: (mlHigh[chanLunIndex[i]] + mlLow[chanLunIndex[i]]) / 2 - yOffset
            });
        }
        chanLunDataSeries.dataPoints = chanLunPoints;

        stockData.push(dataSeries);
        stockData.push(chanLunDataSeries);
        stockData.push(mlDataSeries);
        options2.data = stockData;

        this.setState({
            options: options2
        });
        console.log("here it is")
        console.log(this.state);
    }

    render() {
        return (
              <div>
                    {this.state.options != undefined &&
                    <CanvasJSChart options = {this.state.options}/>}
                    <div style={{display: 'inline-block'}}>
                        <Button
                            variant="success"
                            onClick={this.getStock}>
                                Get Stock
                        </Button>
                    </div>
                    <Popup 
                        className="mm-popup"
                        btnClass="mm-popup__btn"
                        closeBtn={true}
                        defaultOk="Ok" />
              </div>
          );
    }
}

export default TDXTestStockCharts